name: preset-common-image-build

description: "A reusable workflow for building preset images"

inputs:
  weights_dir:
    description: "The directory for weights"
    required: true
  branch_name:
    description: "Branch name"
    required: true
  image_name:
    description: "Image name"
    required: true
  image_tag:
    description: "Image tag"
    required: true
  acr_name:
    description: "ACR name"
    required: true
  acr_username:
    description: "ACR username"
    required: true
  acr_password:
    description: "ACR password"
    required: true
  model_name:
    description: "Model name"
    required: true
  model_type:
    description: "Model type"
    required: true
  model_version:
    description: "Model version"
    required: true
  model_runtime:
    description: "Model runtime"
    required: true
  hf_username:
    description: "HuggingFace Username"
    required: true
  hf_token:
    description: "HuggingFace Token"
    required: true
  runs_on:
    description: "The runner to use"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4.1.6
      with:
        submodules: true
        fetch-depth: 0

    - name: Install Azure CLI latest
      run: |
        if ! which az > /dev/null; then
          echo "Azure CLI not found. Installing..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        else
          echo "Azure CLI already installed."
        fi
      shell: bash

    - name: Check Available Disk Space
      run: |
        echo "Initial disk usage:"
        df -h

        # Check Docker-related disk usage after cleanup
        echo "Docker-related disk usage after cleanup:"
        docker system df

        # Check final disk usage
        echo "Final disk usage:"
        df -h
      shell: bash

    - name: Check if Image exists in target ACR
      id: check_test_image
      run: |
        ACR_NAME=${{ inputs.acr_name }}
        IMAGE_NAME=${{ inputs.image_name }}
        TAG=${{ inputs.image_tag }}

        # Use '|| true' to prevent script from exiting with an error if the repository is not found
        TAGS=$(az acr repository show-tags -n $ACR_NAME --repository $IMAGE_NAME --output tsv || true)

        if [[ -z "$TAGS" ]]; then
          echo "Image $IMAGE_NAME:$TAG or repository not found in $ACR_NAME."
          echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
        else
          if echo "$TAGS" | grep -q "^$TAG$"; then
            echo "IMAGE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Image $IMAGE_NAME:$TAG not found in $ACR_NAME."
          fi
        fi
      shell: bash

    - name: Build image
      if: steps.check_test_image.outputs.IMAGE_EXISTS == 'false'
      run: |
        PR_BRANCH=${{ inputs.branch_name }}
        ACR_NAME=${{ inputs.acr_name }}
        ACR_USERNAME=${{ inputs.acr_username }}
        ACR_PASSWORD=${{ inputs.acr_password }}
        IMAGE_NAME=${{ inputs.image_name }}
        MODEL_NAME=${{ inputs.model_name }}
        MODEL_TYPE=${{ inputs.model_type }}
        MODEL_VERSION=${{ inputs.model_version }}
        MODEL_RUNTIME=${{ inputs.model_runtime }}
        MODEL_TAG=${{ inputs.image_tag }}
        WEIGHTS_DIR=${{ inputs.weights_dir }}
        HF_USERNAME=${{ inputs.hf_username }}
        HF_TOKEN=${{ inputs.hf_token }}

        # Login to Docker registry
        echo $ACR_PASSWORD | docker login $ACR_NAME.azurecr.io -u $ACR_USERNAME --password-stdin

        # Download model and Generate Dockerfile
        MODEL_DIR=$WEIGHTS_DIR/$IMAGE_NAME/weights

        MODEL_NAME=${{ inputs.model_name }} \
        MODEL_VERSION=${{ inputs.model_version }} \
        WEIGHTS_DIR=$MODEL_DIR \
        HF_TOKEN=${{ inputs.hf_token }} \
        python3 docker/presets/models/tfs/download_and_gen_dockerfile.py
        echo "=========================================="
        cat Dockerfile_$IMAGE_NAME
        echo "=========================================="

        # Build
        docker buildx build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$MODEL_TAG \
          --build-context modeldir=$MODEL_DIR \
          --builder default \
          --build-arg VERSION=$MODEL_TAG \
          --build-arg MODEL_TYPE=$MODEL_TYPE \
          --push \
          -f Dockerfile_$IMAGE_NAME .
      shell: bash
